% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hf_classify.R
\name{hf_classify_text}
\alias{hf_classify_text}
\title{Classify text using a Hugging Face Inference API endpoint}
\usage{
hf_classify_text(
  text,
  endpoint_url,
  key_name,
  ...,
  parameters = list(return_all_scores = TRUE),
  tidy = TRUE,
  max_retries = 5,
  timeout = 20,
  validate = FALSE
)
}
\arguments{
\item{text}{Character string to classify}

\item{endpoint_url}{The URL of the Hugging Face Inference API endpoint}

\item{key_name}{Name of the environment variable containing the API key}

\item{...}{Additional arguments passed to \code{hf_perform_request} and
ultimately to \code{httr2::req_perform}}

\item{parameters}{Advanced usage: parameters to pass to the API endpoint,
defaults to \code{list(return_all_scores = TRUE)}.}

\item{tidy}{Logical; if TRUE (default), returns a tidied data frame}

\item{max_retries}{Maximum number of retry attempts for failed requests}

\item{timeout}{Request timeout in seconds}

\item{validate}{Logical; whether to validate the endpoint before creating
the request}
}
\value{
A tidied data frame with classification scores (if \code{tidy=TRUE})
or the raw API response
}
\description{
Sends text to a Hugging Face classification endpoint and returns the
classification scores. By default, returns a tidied data frame with
one row and columns for each classification label.
}
\details{
This function handles the entire process of creating a request to a
Hugging Face Inference API endpoint for text classification, sending
the request, and processing the response.

The function will automatically retry failed requests according to the
\code{max_retries} parameter. If \code{tidy=TRUE} (the default), it transforms
the nested JSON response into a tidy data frame with one row and columns
for each classification label.

If tidying fails, the function returns the raw response with an
informative message.
}
\examples{
\dontrun{
  # Basic classification with default parameters
  result <- hf_classify_text(
    text = "This product is excellent!",
    endpoint_url = "redacted",
    key_name = "API_KEY"
  )

  # Classification with custom parameters for a spam detection model
  spam_result <- hf_classify_text(
    text = "URGENT: You've won a free holiday! Call now to claim.",
    endpoint_url = "redacted",
    parameters = list(return_all_scores = TRUE)
  )

  # Get raw response without tidying
  raw_result <- hf_classify_text(
    text = "I love this movie",
    endpoint_url = "redacted",
    key_name = "API_KEY",
    tidy = FALSE
  )
}
}
