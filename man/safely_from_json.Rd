% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/openai_completions.R
\name{safely_from_json}
\alias{safely_from_json}
\title{Safely extract JSON}
\usage{
safely_from_json(...)
}
\arguments{
\item{...}{Arguments passed to \code{jsonlite::fromJSON}. The first argument
should be \code{txt} (a JSON string, URL or file to parse). Additional
arguments include: \code{simplifyVector} (coerce JSON arrays containing only
primitives to atomic vectors, default TRUE), \code{simplifyDataFrame} (coerce
JSON arrays containing objects to data frames, default TRUE),
\code{simplifyMatrix} (coerce JSON arrays containing equal-length sub-arrays
to matrices, default TRUE), and \code{flatten} (automatically flatten nested
data frames, default FALSE).}
}
\value{
Parsed JSON object on success, empty list on failure
}
\description{
A wrapper around \code{jsonlite::fromJSON} that returns a list instead of
throwing an error when JSON parsing fails. Uses \code{purrr::possibly} to
provide graceful error handling. To be explicit: you will not receive an error
message if your JSON failed to parse, just an empty list. This property
allows you to handle NULL/NA results in the way you'd like to.
}
\examples{
# Valid JSON
safely_from_json('{"name": "John", "age": 30}')

# Invalid JSON returns empty list instead of error
safely_from_json('{"invalid": json}')

# Works with URLs and files too
safely_from_json("https://api.example.com/data.json")

}
\seealso{
\code{\link[jsonlite:fromJSON]{jsonlite::fromJSON()}}, \code{\link[purrr:possibly]{purrr::possibly()}}
}
